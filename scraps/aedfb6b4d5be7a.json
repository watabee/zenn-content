{
  "title": "【Google I/O 2023】What's new in Kotlin for Android",
  "closed": false,
  "archived": false,
  "created_at": "2023-05-25",
  "comments": [
    {
      "author": "watabee",
      "created_at": "2023-05-25",
      "body_markdown": "# What's new in Kotlin for Android\n\nhttps://www.youtube.com/watch?v=QGtB--ABiNM&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=39\n\n## State of Kotlin (0:31~)\n\n- 2017年: Android で Kotlin の公式サポートが発表\n- 2019年: Android の開発は Kotlin-first（ライブラリやドキュメントなどを Kotlin をメインに）\n- トップ1000のアプリの 95% が Kotlin を使用（ライブラリなどの間接コードを含む）\n  - 70% が自身のコードに Kotlin を使用\n  - 55% が自身のコードに Kotlin Coroutines を使用\n- Compose\n  - Kotlin Coroutines やラムダ、拡張関数などの言語機能を使って構築される\n  - Kotlin コンパイラによって状態管理のロジックが生成される\n- Learn Compose\n  - Jetpack Compose for Android Developers : goo.gle/compose-for-android-devs\n  - Android Basics with Compose : goo.gle/abc\n\n## Kotlin @ Google (2:34~)\n\n- 2019年から Android のプロジェクトで、2022年からサーバーサイドで Kotlin を使用\n- 15M+ の行の Kotlin コード\n- 70+ の Android アプリで Kotlin を使用\n- Kotlin Foundation に参加\n\n## The Kotlin 2.0 compiler (3:31~) \n\n- goo.gle/k2-blog\n- Kotlin コンパイラを再構築\n- コードネーム K2\n- Kotlin 2.0 からデフォルトコンパイラに\n- 現状のコンパイラと比較して最大2倍の速度改善\n- 新しいコンパイラは将来より多くの Kotlin の言語機能の進化を可能にする\n- リリースのロードマップ\n  - 2024年中旬\n    - Kotlin 2.0 リリース & K2 がデフォルト\n    - Android Studio での K2 の統合（コード補完、リファクタリングなどの機能）\n  - 2023年中旬\n    - 1.9.x リリース & K2 ベータ\n    - Compose & KSP\n- K2 によって Kotlin のコードを変更する必要はないが、コンパイラプラグインはサポートが必要になるかもしれない\n\nKotlin 2.0 コンパイラを試す方法\n\n```kotlin\n// build.gradle.kts\nkotlin {\n    sourceSets.all {\n        languageSettings {\n            languageVersion = \"2.0\"\n        }\n    }\n}\n```\n\n## Kotlin DSL as the defualt for Gradle builds (5:21~)\n\n- Android Studio Giraffe で Kotlin DSL がデフォルトで使用されるようになった\n  - goo.gle/migrate-to-kts\n- ビルドスクリプトで Kotlin を使うことによっていくつか改善点がある\n  - コードのヒントやシンタックスエラーがより正確\n  - 型やメソッドのドキュメントを得られたり、詳細を知りたければ ctrl + クリックで対象のソースコードへ飛ぶことができる\n- Gradle Version Catalogs\n  - プロジェクトの依存関係の定義\n  - goo.gle/migrate-to-catalogs\n- Now in Android のプロジェクトでも使われている\n  - goo.gle/nia\n\n## KSP (7:21~)\n\n- kapt\n  - Kotlin Annotation Processing Tool\n  - Kotlin のコードから Java のスタブコードを生成し、Java 用のアノテーションプロセッサで Kotlin で動作するようにする\n  - スタブコードの生成は時間のかかる操作のため、アノテーションプロセッシングを使ったプロジェクトのビルド速度に影響を与える\n- KSP\n  - Kotlin Symbol Processing\n  - Kotlin のコードを直接解析\n- KSP の利点\n  - ビルド速度が最大2倍改善\n  - nullability といった Kotlin 特有の言語機能の解釈が可能\n  - マルチプラットフォームのサポート\n- KSP へのマイグレーション\n  - goo.gle/migrate-to-ksp\n- KSP のサポート状況\n  - Room, Glide, Moshi など\n  - goo.gle/ksp-support でサポートしているライブラリを確認可能\n  - Dagger / Hilt は対応予定\n- 一部のライブラリでも KSP 対応することをオススメ\n  - マイグレーションはライブラリごと、モジュールごとといったように段階的に可能\n\n## Kotlin Multiplatform (9:59~)\n\n- Kotlin Multiplatform では Kotlin でコードを書くことで、Android と iOS でビジネスロジックの共有が可能\n- Google Workspace では Kotlin Multiplatform を使って Android, iOS, WEB でビジネスロジックを共有している\n- Multiplatform Jetpack libraries\n  - Annotations 1.7.0-alpha02\n  - Collections 1.3.0-alpha04\n  - DataStore 1.1.0-alpha03\n- Kotlin Multiplatform のサンプルプロジェクト\n  - goo.gle/kmm-samples\n"
    }
  ]
}