{
  "title": "【Google I/O 2023】Scalable UI testing solutions",
  "closed": false,
  "archived": false,
  "created_at": "2023-05-25",
  "comments": [
    {
      "author": "watabee",
      "created_at": "2023-05-25",
      "body_markdown": "# Scalable UI testing solutions\n\nhttps://www.youtube.com/watch?v=L6CSaH0kDnI&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=120\n\n## Espresso Device API (0:59~)\n\n端末の回転や折りたたみ端末の開閉の操作などで Configuration Change が発生する。\n\n新しい Espresso Device API を使って Configuration Change のテストができる。\nテストには API レベル24以降の Android の仮想デバイスを使う。\nまた Configuration Change のテストは同期的な方法となるので、スリープ関数などを使う必要がない。\n\n### 設定について\n\nAndroid Gradle Plugin 8.2 の最新の Canary バージョンを使う。\n\n```groovy\nplugins {\n    id 'com.android.application' version '8.2.0-alpha04' apply false\n}\n```\n\nそして Android emulator は 33.1.10 以降をインストールする。\n\n`androidTest` のマニフェストに以下のパーミッションが必要。\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```\n\n最後に app モジュールの Gradle ファイルに以下を設定。\n\n```groovy\ntestOptions {\n    emulatorAccess {\n        enabled true\n    }\n}\n...\n\ndependencies {\n    androidTestImplementation 'androidx.test.espresso:espresso-device:1.0.0-alpha05'\n}\n```\n\n画面回転のテストは以下のような感じで使う。\n\n```kotlin\nimport androidx.test.espresso.device.action.ScreenOrientation\nimport androidx.test.espresso.device.rules.ScreenOrientationRule\n...\n@get:Rule\nval screenOrientationRule: ScreenOrientationRule = \n    ScreenOrientationRule(ScreenOrientation.PORTRAIT)\n    \n@Test\nfun myRotationTest() {\n    ...\n    // Sets the device to landscape orientation during test execution\n    onDevice().setScreenOrientation(ScreenOrientation.LANDSCAPE)\n    // Checks that the appropriate UI is displayed in this orientation\n    composeTestRule.onNodeWithTag(\"NavRail\").assertIsDisplayed()\n    composeTestRule.onNodeWithTag(\"BottomBar\").assertDoesNotExist()\n}\n```\n\n折りたたみ端末の開閉状態の変更のテストは以下のような感じ。\n\n```kotlin\n// Test starts in folded state and check for a compact mode layout\n@Test\nfun myUnfoledTest() {\n    // Starts the test with the device in a folded state.\n    onDevice().setClosedMode()\n    composeTestRule.onNodeWithTag(\"BottomBar\").assertIsDisplayed()\n    composeTestRule.onNodeWithTag(\"NavRail\").assertDoesNotExist()\n    ...\n    // Unfolds the device into a flat posture.\n    onDevice().setFlatMode()\n    composeTestRule.onNodeWithTag(\"NavRail\").assertIsDisplayed()\n    composeTestRule.onNodeWithTag(\"BottomBar\").assertDoesNotExist()\n}\n```\n\n折りたたみ端末じゃない場合にテストをスキップすることもできる。\n\n```kotlin\n@Test\n// Test skips on devices that don't support a FLAT posture.\n@RequiresDeviceMode(mode = FLAT)\nfun myUnfoldedTest() {\n    ...\n}\n```\n\n上記のルールは各テストケースとテストクラス全体に追加することができる。\n\n\n## Gradle Managed Devices (5:38~)\n\n- 昨年公開されたローカル、CI ともに使える仮想デバイス\n- build.gradle に少し設定を書くと、Android Gradle Plugin が端末のダウンロード＆作成、スナップショットとテストキャッシュの管理、デバイスのシャットダウンを行なってくれる\n- Gradle ManagedDevice では、Firebase test Lab で選択した実機もしくは仮想デバイスを利用して CI からテスト実行することができるようになった\n\n\n以下のように設定する。\n\n```groovy\n// In your Project Gradle file\nplugins {\n    ...\n    id 'com.google.firebase.testlab' version '0.0.1-alpha02' apply false \n}\n\n// In your gradle.properties file\nandroid.experimental.testOptions.managedDevices.customDevice=true\n```\n\n```groovy\nplugins {\n    ...\n    id 'com.google.firebase.testlab'\n}\n\n...\n    \nfirebaseTestLab {\n    managedDevices {\n        create(\"GalaxyS22Ultra\") {\n            device = \"b0q\" // Device model_id\n            apiLevel = 33\n        }\n    }\n}\n```\n\nFirebase Test Lab でテストを実行したい場合は Firebase アカウントの認証が必要になるので、以下のように設定できる。\n\n```groovy\nfirebaseTestLab {\n    serviceAccountCredentials = file('~/my-service-account.json')\n}\n```\n\n実行するコマンドは以下のような感じ。\n\n```shell\n$ gradlew GalaxyS22UltraDebugAndroidTest\n```\n\nテストの結果は HTML レポート、protofile（Android Studio で開ける）、Firebase コンソールで確認できる。\n\n複数の端末で確認したい場合は、以下のように設定する。\n\n```groovy\nfirebaseTestLab {\n    managedDevices {\n        create(\"GalaxyS22Ultra\") { ... }\n        create(\"GalaxyZFlip3\") { ... }\n        create(\"GalaxyZFold3\") { ... }\n        create(\"GalaxyTabS3\") { ... }\n    }\n}\n```\n\n一つのタスクでこれらの端末のテストを実行したい場合、デバイスグループを追加する。\n\n```groovy\nandroid {\n    ...\n    testOptions {\n        managedDevices {\n            groups {\n                samsungGalaxy {\n                    targetDevices.add(devices.GalaxyS22Ultra)\n                    targetDevices.add(devices.GalaxyZFlip3)\n                    targetDevices.add(devices.GalaxyZFold3)\n                    targetDevices.add(devices.GalaxyTabS3)\n                    ...\n                }\n            }\n        }\n    }\n}\n```\n\nテストの実行は以下のコマンドで行える。\n\n```shell\n$ gradlew samsungGalaxyGroupDebugAndroidTest\n```\n\n## Screenshot testing (9:10~)\n\nAndroid Gradle Plugin 8.2 から実験的機能として、レイアウトのプレビューから画像を作成し、スクリーンショットテストに使えるようになる。\n\nまず最初に app モジュール内に新しいディレクトリかソースセットを作成し、名前を screenshotTest にする。\n\n```\n~/MyProject/app/src/screenshotTest/\n```\n\nこのソースセット内で Kotlin のファイルを作成し、プレビューの設定を行う。\n\n```kotlin\n// Set up a preview as you normally would inside the new source set\n@Preview(device = Devices.PHONE)\n@Composable\nfun ChatPreview() {\n    ChatTheme {\n        ConversationContent(\n            uiState = exampleUiState,\n            navigateToProfile = {  }\n        )\n    }\n}\n```\n\n以下のコマンドを実行する。\n\n```shell\n$ gradlew debugScreenshotTest --record-reference-images\n```\n\nGradle は reference image を作成し、プロジェクトに保持する。この生成された画像をコミットすれば CI のテストに使える。\n\nもし誰かが再利用可能なコンポーネントを変更した場合、予期しない結果となるはず。\nもしこの変更が対象の画面に影響を与える場合、スクリーンショットテストはリグレッションを検知する。\nそのために、以下のテストタスクを実行する。\n\n```shell\n$ gradlew debugScreenshotTest\n```\n\nテスト実行後、Gradle は HTML レポートを生成し、その中に reference image とテストで実行した際の画像が失敗したテストごとに含まれる。\n結果には diff も提供され、変更した箇所がハイライトされる。\n\nリグレッションのテストは多くの異なるレイアウト、コンポーネント、画面サイズやテーマに対して行える。\nまだ実験的な機能なので、プレビューのドキュメントのチェックが必要。\n"
    }
  ]
}