{
  "title": "【Google I/O 2023】Building for the future of Android",
  "closed": false,
  "archived": false,
  "created_at": "2023-05-25",
  "comments": [
    {
      "author": "watabee",
      "created_at": "2023-05-25",
      "body_markdown": "# Building for the future of Android\n\nhttps://www.youtube.com/watch?v=WMMPXayjP8g&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=35\n\n## Interoperability\n\n### Background Work on Android 14 (1:01~)\n\nバックグラウンドでタスクを実行する際に、どの方法を選択すればよいか可視化したフローチャート。\n\n![](https://storage.googleapis.com/zenn-user-upload/7d8adabdf1c0-20230515.png)\n\n\n- Foreground service の例\n    - メディアプレイバック、オーディオレコーディング、ワークアウトのトラッキング\n- Android 14 をターゲットとするアプリは Foreground Service のタイプの指定が必要\n- location タイプのような Foreground Service はランタイム時にパーミッションが必要\n\n以下は `health` と `location` のタイプのサービスを定義する例。\nタイプは `|` を使って連結できる。\n\n```xml\n<manifest ...>\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_HEALTH\" />\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_LOCATION\" />\n    \n    <application>\n        <service\n             android:name=\".MyFitnessService\"\n             android:foregroundServiceType=\"health|location\"\n             android:exported=\"false\">\n        </service>\n    </application>\n</manifest>    \n```\n\n- `shortService` という新しいタイプが Android 14 から追加\n    - 必要なパーミッションは `FOREGROUND_SERVICE` のパーミッションだけ\n    - 実行時間が短い重要なタスクで、Foreground service の基準に満たない時のためのもの\n\n### Cached apps in Android 14 (3:00~)\n\nアプリがキャッシュステートに移行した場合。\n\n- 数秒間 CPU の使用時間を得られない\n- 動的に登録されたブロードキャストはキューに入れられる。通知される際にはマージされて通知されることもある\n\n\n### User-initiated data transfer (3:37~)\n\n- ファイルのダウンロードやアップロードといった、長時間にわたるユーザーが開始したデータ転送のジョブに向いている\n- `RUN_USER_INITIATED_JOBS` パーミッションがマニフェストに必要\n- アクティブ時には Notification が必要\n- 再スケジュールや制約をサポート\n\n\n### Telecom Jetpack library (3:55~)\n\n- 通話関連のバックグランドワークをサポート\n- Telecom API の簡略化\n- 新機能に対する下位互換のサポート\n\n\n### Exact Alarms (4:18~)\n\n- Android 14 の端末で Android 13 をターゲットにしたアプリは正確なアラームが制限される\n    - `USE_EXACT_ALARM` は使用が制限される\n    - `SCHEDULE_EXACT_ALARM` は権限が付与された場合の特殊なもの\n\n\n## Cross Device SDK (4:56~)\n\n- デバイスの探索、セキュアなコミュニケーション、マルチデバイスセッション\n- Android phones & tablet 向け\n- https://github.com/google/cross-device-sdk\n\n\n## Migrating to Predictive Back (5:33~)\n\n- Predictive Back は Android 13 から導入されたジェスチャーナビゲーションの改善版\n    - スワイプで画面を戻る際に、どこの画面に戻るかのプレビューをユーザーに表示する\n- Android 14 ではアプリ内においてアニメーションが追加される\n- バックイベントをインターセプトしていない場合のマイグレーション方法\n    - `androidx.activity:activity:1.6.0` 以上にする\n    - マニフェストファイルで `android:enableOnBackInvokedCallback=\"true\"` に設定する\n- バックイベントをインターセプトしている場合\n    - `KeyEvent.KEYCODE_BACK` や `onBackPressed` を使ってインターセプトは行わないようにする\n    - Compose なら `BackHandler`、ビューシステムなら `onBackPressedCallback` & `onBackPressedDispatcher` を使うようにする\n\n### BackHandler や onBackPressedCallback を実装する際の Tips\n\n1. **UI State** でコールバックを有効・無効にするかを決める\n\n```kotlin\nvar text by remember {\n    mutableStateOf(\"\")\n}\n\nTextField(\n    value = text,\n    onValueChange = {\n        text = it\n    }\n)\n\nBackHandler(text.isNotEmpty()) {\n    // handle back event\n}\n```\n\n2. ダイアログを表示する、アニメーションを実行するといった UI の状態を変更する UI ロジックには predictive back のコールバックを使う\n3. 一つの責任だけを持つコールバックを作成する\n    - コールバックは複数作成することができ、各コールバックは次のバックジェスチャーをハンドリングする\n4. Android 14 ではコールバック内でアプリのキーモーメントのアニメーションを実行する\n\n```kotlin\n// use androidx.activity:activity-ktx:1.8.0-alpha01 or higher\n\nobject: OnBackPressedCallback(true) {\n    override fun handleOnBackStarted() {\n    }\n    \n    override fun handleOnBackProgressed(backEvent: BackEvent) {\n    }\n    \n    override fun handleOnBackCancelled() {\n    }\n}\n```\n\n---\n\n- Android 14 では各 Activity で Predictive Back のオプトインができる\n\n```xml\n<manifest ...>\n    <application ...\n        android:enableOnBackInvokedCallback=\"false\" >\n        <activity\n            android:name=\".MainActivity\"\n            android:enableOnBackInvokedCallback=\"true\"\n            ...>\n        </activity>\n    </application>\n</manifest>    \n```\n\n- ドキュメント\n    - goo.gle/back-basics\n    - goo.gle/navigation-custom-back\n    - goo.gle/predictive-back-gesture\n\n\n## Privacy & Security (8:53~)\n\n- Android Privacy Codelab\n    - d.android.com/android-privacy-codelab\n    \nGoogle Play のターゲット SDK のロードマップ。\n\n| Target SDK | New app | App update |\n| ------- | ------- | ------- |\n| 34 | 2024/08/01 | 2024/11/01 |\n| 33 | 2023/08/01 | 2024/11/01 |\n\n\n- Android 14 以降の端末では、targetSdkVersion が 23 以下のアプリはインストールができない\n- Google Play SDK Index は多くの商用 SDK の情報を持っている\n    - それらのターゲット SDK バージョンをチェックできる\n- Data access auditing APIs \n    - アプリに含まれている SDK からのデータアクセスを監査\n- Privacy and Security\n    - [What's new in Android privacy and security](https://www.youtube.com/watch?v=MsNraIQ6mUI&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=31&pp=iAQB)\n- Privacy Sandbox on Android\n    - [10 things to know about the Privacy Sandbox on Android](https://www.youtube.com/watch?v=rOtYqxaSnco&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=36&pp=iAQB)\n- Health Connect\n    - [What's new in Health on Android](https://www.youtube.com/watch?v=hlyC0I6v9ic&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=25&pp=iAQB)\n- Android 12 changed backups\n    - Key-Value Pair Backups : 5MB までの制限\n    - Cloud Auto Backups : 25MB までの制限\n    - Device to Device Auto Backups : 2GB までの制限\n    - バックアップ・リストアのテスト\n        - d.android.com/guide/topics/data/testingbackup\n- Credential Manager\n    - 新しい Jetpack の Credential Manager API ではパスキーによるパスワードなしの認証がサポートされている\n    - [How to resuce reliance on passwords in Android apps with passkey support](https://www.youtube.com/watch?v=36peNZUlgzU&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=34&pp=iAQB)\n\n\n## Personalization (11:18~)\n\n### Jetpack Glance\n\n- goo.gle/glance\n- Compose を使ったウィジェットの作成\n- goo.gle/build-widgets\n\n### Themed app icon\n\n- Adaptive Icon に対応しているなら以下のように `monochrome` を追加する\n\n```xml\n<adaptive-icon>\n    <background android:drawable=\"@drawable/background\" />\n    <foreground android:drawable=\"@drawable/foreground\" />\n    <monochrome android:drawable=\"@drawable/foreground\" />\n</adaptive-icon>\n```\n\n- Android Studio Flamingo 以降でプレビューでの確認ができる\n- goo.gle/adaptive-icon-template\n- goo.gle/adaptive-icon-codelab\n\n\n### Per app preferences\n\n- Android 13 からアプリごとに言語設定が可能になった\n    - 以前はアプリがサポートする言語をファイルに全てリスト化する必要があった\n    - このファイルを自動生成してくれるようにサポート\n        - Android Studio Girafe 以降で Android Gradle Plugin 8.1.0-alpha07 以降\n        - `res/resources.properties` を追加し、デフォルトのロケールを記載する\n            - `uniqualifiedResLocale=en-US`\n        - build.gradle に以下を追加\n        - (もし追加していた場合は) locale-config のファイルを削除する\n\n```groovy\nandroid {\n    androidResources {\n        generateLocaleConfig true\n    }\n}\n```\n\n\n- ユーザーに表示する言語はカスタマイズが可能\n    - A/B テストで特定の言語を表示・非表示にすることができる\n\n```kotlin\n// i.e. \"de,fr,hi,ja\" or \"de,fr,hi,ja,bn\"\nval locales = Firebase.remoteConfig[\"a_b_test\"].asString()\n\nval localeManager = applicationContext.getSystemService(LocaleManager::class.java)\nlocaleManager.overrideLocaleConfig = LocaleConfig(LocaleList.forLanguageTags(locales))\n```\n\n- Regional Preferences\n    - ユーザーは気温や週といった設定のカスタマイズも可能\n    - LocalePreferences のライブラリをチェック\n        - `androidx.core` に LocalePreferences が追加されている\n        - https://developer.android.com/jetpack/androidx/releases/core#1.12.0-alpha01\n\n```kotlin\nLocalePreferences.getTemperatureUnit()\nLocalePreferences.getFirstDayOfWeek()\n```\n\n### Supporting Grammatical Inflection\n\n- 言語によっては性別による文法の違いがある\n    - デフォルトはたいてい男性的な文法\n- Android 14 では Grammatical Inflection API を使うと性別ごとの文字列リソースを作成できる\n    - `feminine` (女性的), `masculine` (男性的), `neuter` (中性的)\n\n```xml:values-fr-femenine/strings.xml\n<resources>\n    <string name=\"sub\">Vous êtes abonnée à...</string>\n</resources>  \n```\n\n- `GrammaticalInflectionManager` を使って、性別による文法を設定できる\n\n```kotlin\ngrammaticalInflectionManager\n    .setRequestedApplicationGrammaticalGender(\n        android.content.res.Configuration.GRAMMATICAL_GENDER_FEMININE\n    )\n```\n\n### Non-linear font scaling\n\n- Android 14 では非線形のフォントスケーリングが追加された\n- 大きいテキストサイズほど拡大率が低く、小さいテキストサイズは通常通り拡大される\n- TypedValue の `applyDimension()` や `deriveDimension()` を使って sp <-> px の変換を行う\n- Configuration や DisplayMetrics によるハードコードな計算は避ける\n- [What's new in Android Accessibility](https://www.youtube.com/watch?v=w1Fqx_2SRro&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=5&pp=iAQB)\n\n\n### Voice control\n\n- App Actions を使ってアプリと Google アシスタントを統合\n- ディープリンクのサポート\n    - Android App Links が使える\n    - [Optimize performance and app experiences with deep linking](https://www.youtube.com/watch?v=GeyvIbBS7s8&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=19&pp=iAQB)\n- d.android.com/guide/app-actions/get-started\n\n## Future Hardware (15:15~)\n\n### Ultra HDR\n\n- Android 14 からで、以下のいずれかで使用可能\n    - AndroidManifest ファイルの Activity で `android:colorMode=\"hdr\"` を指定する\n    - `getWindow().setColorMode(ActivityInfo.COLOR_MODE_HDR)`\n\n\n### Android Camera\n\n- [Building high quality Android camera experiences](https://www.youtube.com/watch?v=rNe2xGKjtvc&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=33&t=77s&pp=iAQB)\n\n### Android Media\n\n- [Creating high-quality Android media experiences](https://www.youtube.com/watch?v=sv9ICtooWBc&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=32&pp=iAQB)\n\n### Foldables\n\n- [How to build great Android apps for large screens and foldables](https://www.youtube.com/watch?v=5JQjk3ZqPWc&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=21&pp=iAQB)\n\n### 64-bit only\n\n- Pixel 7は64ビットのみサポート\n- 今後の端末も64ビットのみになっていくことが期待される\n- [Keep your app from failing in a 64-bit only world](https://www.youtube.com/watch?v=mqRrkUO7wxY)\n\n### On-device ML\n\n- [How to build smarter Android apps with on-device Machine Learning](https://www.youtube.com/watch?v=BpthRGc3bM0&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=43&pp=iAQB)\n\n\n"
    }
  ]
}