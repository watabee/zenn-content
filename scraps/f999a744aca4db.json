{
  "title": "【Google I/O 2023】Manage Firebase projects with Terraform",
  "closed": false,
  "archived": false,
  "created_at": "2023-06-03",
  "comments": [
    {
      "author": "watabee",
      "created_at": "2023-06-03",
      "body_markdown": "https://www.youtube.com/watch?v=32SKh-jGXI4&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=68\n\n## Infrastructure-as-code (1:37~)\n\n- Terraform で Firebase のプロジェクトがセットアップできる\n\nFirebase のリソースは `google-beta` プロバイダによってサポートされている。\n\n```terraform\nterraform {\n    required_providers {\n        google-beta = {\n            source = \"hashicorp/google-beta\"\n            version = \"~> 4.0\"\n        }\n    }\n}\n```\n\n`google-beta` プロバイダは `user_project_override` 属性を持っていて、Terraform からの操作がどのように使用状況をチェックされるかを決めることができる。\nTerraform のエイリアスの機能によって、以下のように属性値を分けてプロバイダをセットアップすることができる。\n\n```terraform\nprovider \"google-beta\" {\n    alias                 = \"no_user_project_override\"\n    user_project_override = false\n}\n\nprovider \"google-beta\" {\n    user_project_override = true\n}\n```\n\nFirebase のプロジェクトを作成するには、以下のように google_project のリソースに `firebase` を有効にして設定する。\n\n```terraform\nresource \"google_project\" \"prod\" {\n    provider        = google-beta.no_user_project_override\n    \n    name            = \"Project Display Name\"\n    project_id      = \"project-id-for-new-project\"\n    billing_account = \"000000-000000-000000\"\n    \n    labels = {\n        \"firebase\" = \"enabled\"\n    }\n}\n```\n\n続いて Service Usage API と Firebase Management API を有効にする。\nこれは Firebase Console を使った場合は裏側で行われている処理となっている。\n\n```terraform\nresource \"google_project_service\" \"prod-init\" {\n    provider = google-beta.no_user_project_override\n    \n    project = google_project.prod.project_id\n    for_each = toset([\n        \"serviceusage.googleapis.com\",\n        \"firebase.googleapis.com\",\n    ])\n    service = each.key\n    \n    disable_on_destroy = false\n}\n```\n\n最後に firebase のプロジェクトを作成する。\n\n```terraform\nresource \"google_firebase_project\" \"prod\" {\n    provider = google-beta\n    project  = google_project.prod.project_id\n    \n    depends_on = [\n        google_project_service.prod-init,\n    ]\n}\n```\n\n## Add Firebase Resources (4:13~)\n\nAndroid、iOS、Web 用にリソースを作る。\n\n```terraform\nresource \"google_firebase_android_app\" \"prod\" {\n    provider     = google_beta\n    project      = google_firebase_project.prod.project\n    display_name = \"My Android app\"\n    package_name = \"com.example.myandroidapp\"\n}\n\nresource \"google_firebase_apple_app\" \"prod\" {\n    provider     = google_beta\n    project      = google_firebase_project.prod.project\n    display_name = \"My Apple app\"\n    bundle_id    = \"com.example.myappleapp\"\n}\n\nresource \"google_firebase_web_app\" \"prod\" {\n    provider        = google-beta\n    project         = google_firebase_project.prod.project_id\n    display_name    = \"My Web app\"\n    deletion_policy = \"DELETE\"\n}\n```\n\nAuthenticatin と Firestore を追加する場合の例。\nTerraform でリソースを作った際に必要な API が有効になっていなければ、エラーとなって Terraform は必要な API の名前を出力してくれる。\n\n```terraform\nresource \"google_project_service\" \"prod\" {\n    provider = google-beta\n    \n    project = google_project.prod.project_id\n    for_each = toset([\n        \"cloudbilling.googleapis.com\",\n        \"firestore.googleapis.com\",\n        \"firebaserules.googleapis.com\",\n        \"identitytoolkit.googleapis.com\",\n    ])\n    service = each.key\n    \n    disable_on_destroy = false\n}\n```\n\nFirestore データベースの作成。\n\n```terraform\nresource \"google_firestore_database\" \"prod\" {\n    provider         = google-beta\n    project          = google_firebase_project.prod.project\n    name             = \"(default)\"\n    \n    location         = \"name-of-region\"\n    \n    type             = \"FIRESTORE_NATIVE\"\n    concurrency_mode = \"OPTIMISTIC\"\n    \n    depends_on = [\n        google_project_service.prod,\n    ]\n}\n```\n\nFirestore のセキュリティルールの作成。\n\n```terraform\nresource \"google_firebaserules_ruleset\" \"prod\" {\n    provider = google-beta\n    project  = google_firebase_project.prod.project\n    source {\n        files {\n            name    = \"firestore.rules\"\n            content = file(\"firestore.rules\")\n        }\n    }\n        \n    depends_on = [\n        google_firestore_database.prod,\n    ]\n}\n\n\nresource \"google_firebaserules_release\" \"prod\" {\n    provider     = google-beta\n    name         = \"cloud.firestore\" \n    ruleset_name = google_firebaserules_ruleset.prod.name\n    project      = google_firebase_project.prod.project\n}\n```\n\nAuthentication の設定。\n\n```terraform\nresource \"google_identity_platform_config\" \"prod\" {\n    provider = google-beta\n    project  = google_firebase_project.prod.project\n    \n    autodelete_anonymous_users = true\n\n    depends_on = [\n        google_project_service.prod,\n    ]\n}\n```\n\nサインインの方法を設定する。\n\n```terraform\nresource \"google_identity_platform_project_default_config\" \"prod\" {\n    provider = google-beta\n    project  = google_firebase_project.prod.project\n    sign_in {\n        anonymous {\n            enabled = true\n        }\n        email {\n            enabled = true\n        }\n        phone_number {\n            enabled = true\n        }\n    }\n    \n    depends_on = [\n        google_identity_platform_config.prod,\n    ]\n}\n```\n\n## Terraform CLI (6:23~)\n\nTerraform の主要なコマンドは以下の3つ。\n\n- terraform init\n    - 初期化\n- terraform plan\n    - リソースの作成や削除、変更のプレビュー\n- terraform apply\n    - リソースの作成や削除、変更を行う\n\nterraform show コマンドでプロジェクトについての詳細を見ることができる。\n\n\n### ステージング環境のプロジェクトを作成する (8:07~)\n\n本番環境のリソースをコピーしてステージング環境用のリソースを作る。\n\n```terraform\nresource \"google_project\" \"staging\" { ... }\nresource \"google_firebase_project\" \"staging\" { ... }\nresource \"google_project_service\" \"staging\" { ... }\n\n...\n```\n\nもしコピペで作りたくない場合、Terraform には for ループに似た機能があるのでそれを使うとよい。\n\nコピペの場合はステージング環境用に google_project の name や project_id、google_firebase_android_app の display_name などを変えることができる。\n\n\n## Update infrastructure (9:27~)\n\n新しい firestore のルールを適用したいとする。\nその場合以下のような感じで変更する。\n\n```terraform\nresource \"google_firebaserules_ruleset\" \"staging-V2\" {\n    provider = google-beta\n    project  = google_firebase_project.staging.project\n    source {\n        files {\n            name    = \"firestore.V2.rules\"\n            content = file(\"firestore.V2.rules\")\n        }\n    }\n        \n    depends_on = [\n        google_firestore_database.staging,\n    ]\n}\n\nresource \"google_firebaserules_release\" \"staging\" {\n    provider     = google-beta\n    name         = \"cloud.firestore\" \n    ruleset_name = google_firebaserules_ruleset.stating-V2.name\n    project      = google_firebase_project.staging.project\n}\n```\n"
    }
  ]
}