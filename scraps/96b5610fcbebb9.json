{
  "title": "【Google I/O 2023】What's new in Firebase's Android SDK",
  "closed": false,
  "archived": false,
  "created_at": "2023-05-25",
  "comments": [
    {
      "author": "watabee",
      "created_at": "2023-05-25",
      "body_markdown": "# What's new in Firebase's Android SDK\n\nhttps://www.youtube.com/watch?v=nYGg_8Ro5VE&list=PLOU2XLYxmsIIwZQkAPhJZg8jaNrrHk1DH&index=71\n\n## Firebase でサポートしているツール (1:52~)\n\n- Authentication\n- App Check\n- Cloud Functions\n- Cloud Firestore\n- Cloud Storage\n- Firebase ML (beta)\n- Firebase Extensions\n- Hosting\n- Realtime Database\n- App Distribution\n- Crashlytics\n- Performance Monitoring\n- Test Lab\n- A/B Testing\n- Cloud Messaging\n- Dynamic Links\n- In-app Messaging\n- Remote Config\n\n## 以前の Google I/O からの変更点 (2:28~)\n\n- Crashlytics (2:38~)\n    - Android Studio の App Quality Insights で Crashlytics のクラッシュレポートが見れるようになり、該当のコードへ飛ぶこともできる\n- Performance Monitoring (3:25~)\n    - プラットフォームごとにデフォルトの標準パーセンタイルを設定できる\n    - Android の Fragment に対するスクリーンパフォーマンスのメトリクスを追加\n- App Distribution (4:29~)\n    - アプリの配布を一般利用可能にし、完全にサポートされたプロダクトとして使用する準備ができている\n- App Check (4:58~)\n    - Play Integrity API との統合\n\n\n## 今後について\n\n### アプリ起動時のパフォーマンス改善 (6:00~)\n\n- 新しい効率的なスレッドプールとバックグラウンドワーカーによって、Android SDK のアプリ開始時の CPU 消費を減らす改善を行った\n- プロダクトが必要になったタイミングでインスタンス化するように、初期化の遅延を行った\n- これらの対応により、Firebase を使用したアプリは平均して3%起動が速くなった（だいたい20ms）\n\n\n### kotlin-first (7:08~)\n\n- Firebase のコードを Java から Kotlin に\n- Java は引き続き使用できるようにする\n\n```kotlin\n// Current Android SDK Code\nclass DocumentReference {\n    public Task<DocumentSnapshot> get()\n}\n\n// App Code\nsuspend fun getMovie(name: String) {\n    db.collection(\"movies\").document(name).get().await()\n}\n```\n\nTask は現状キャンセルを完全にサポートしていないので、キャンセルのリクエストがあってもタスクを停止させることができない。\n\n今後は以下のように Android SDK は suspend 関数を直接公開するようになる。\n\n```kotlin\n// Kotlin-first Android SDK Code\nclass DocumentReference {\n    suspend fun get(): DocumentSnapshot\n}\n\n// App Code\nsuspend fun getMovie(name: String): Movie {\n    val doc = db.collection(\"movies\").document(name).get()\n    return doc.toObject<Movie>()\n}\n```\n\nまた例として、Firebase Cloud Storage でデータを取得する際には Flow が使えるようになる。\n\n```kotlin\nprivate suspend fun uploadFile(file: File) {\n    val uploadTask = Firebase.storage.reference.child(\"image.jpg\").putFile(file)\n    uploadTask.taskState.collect { state: TaskState ->\n        when (state) {\n            is TaskState.InProgress -> {\n                val (bytesTransferred, totalByteCount) = state.progress\n                val progress = (100.0 * bytesTransferred) / totalByteCount\n                Log.d(TAG, \"Upload is $progress% done\")\n            }\n            is TaskState.Paused -> {\n                Log.d(TAG, \"Upload is paused\")\n            }\n        }\n    }\n}\n```\n"
    }
  ]
}