{
  "title": "【Android】whenLifecycle / whenStarted / whenResumed",
  "closed": false,
  "archived": false,
  "created_at": "2024-02-03",
  "comments": [
    {
      "author": "watabee",
      "created_at": "2024-02-03",
      "body_markdown": "https://twitter.com/github_skydoves/status/1753430468031287448?s=09&t=yTalTXNQNTAB2j9aPbeXcQ\nTwitter で `WhenLifecycle.kt` というファイルが追加されたことを知った。\n\nhttps://android-review.googlesource.com/c/platform/frameworks/support/+/2944594/3/lifecycle/lifecycle-runtime-compose/src/main/java/androidx/lifecycle/compose/WhenLifecycle.kt"
    },
    {
      "author": "watabee",
      "created_at": "2024-02-03",
      "body_markdown": "`whenLifecycle` は特定のライフサイクル状態になったら引数で指定したラムダが実行される。\n\n```kotlin\n@Composable\nprivate fun whenLifecycle(\n    state: State,\n    lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current,\n    onState: () -> Unit,\n): () -> Unit {\n    require(state != State.DESTROYED) {\n        \"Target state is not allowed to be `Lifecycle.State.DESTROYED` because Compose disposes \" +\n            \"of the composition before `Lifecycle.Event.ON_DESTROY` observers are invoked.\"\n    }\n\n    return {\n        if (lifecycleOwner.lifecycle.currentState == state) {\n            onState()\n        }\n    }\n}\n```\n"
    },
    {
      "author": "watabee",
      "created_at": "2024-02-03",
      "body_markdown": "`whenLifecycle` はプライベートメソッドになっており、パブリックなメソッドとして `whenStarted` と `whenResumed` がある。\n\n```kotlin\n@Composable\nfun whenStarted(\n    lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current,\n    onStarted: () -> Unit,\n): () -> Unit = whenLifecycle(State.STARTED, lifecycleOwner, onStarted)\n```\n\n```kotlin\n@Composable\nfun whenResumed(\n    lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current,\n    onResumed: () -> Unit,\n): () -> Unit = whenLifecycle(State.RESUMED, lifecycleOwner, onResumed)\n```\n",
      "body_updated_at": "2024-02-03"
    },
    {
      "author": "watabee",
      "created_at": "2024-02-03",
      "body_markdown": "用途としてはコメントに記載してあるようにクリック時や画面遷移時に Start, Resume 状態を保証したい場合に使える。\n\n```kotlin\nMyComposable(\n  onClick = whenStarted {\n    // Do something on clicks, if and only if, the lifecycle state is RESUMED\n  }\n)\n```\n\n```kotlin\ncomposable(...) { entry: NavBackStackEntry ->\n  ...,\n  Screen1(\n    navigateToScreen = whenResumed {\n      navController.navigate(\"screen2\")\n  },\n```\n"
    },
    {
      "author": "watabee",
      "created_at": "2024-02-03",
      "body_markdown": "先日 Navigation Compose で画面を戻る際に二重タップされて画面遷移がおかしくなる不具合があったため、まさにこれが使えそう。\n\nあとは例えばタップを契機にして Fragment を表示する場合にこの対応を入れておけば、onSaveInstanceState が呼び出された後に Fragment を呼び出してクラッシュしてしまうといったことも防げそう。\n"
    }
  ]
}